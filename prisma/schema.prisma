// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int            @id @default(autoincrement())
  provider      String         @default("email/phone")
  img_thumbnail String?
  first_name    String
  last_name     String
  email         String         @unique
  phone_num     String?        @unique
  password      String
  about         String?
  admin         Boolean        @default(false)
  created_at    DateTime       @default(now())
  Course        Course[]
  Participants  Participants[]
  Gift          Gift[]
  Suggest       Suggest[]
}

model Course {
  id              Int            @id @default(autoincrement())
  completion      Boolean        @default(false)
  title           String
  price           String?
  description     String
  host_details    Users          @relation(fields: [host], references: [id])
  host            Int
  max_paticipants Int //
  images          String[]
  hosted          Boolean        @default(false)
  duration_type   String //
  Classes         Classes[]
  link            String?
  class_structure String //
  structure       Json?
  Vid_Classes     Vid_Classes[]
  methodology     Json?
  content         Json?
  requirements    Json?
  Participants    Participants[]
  Gift            Gift[]
  Suggest         Suggest[]
}

model Classes {
  id          Int     @id @default(autoincrement())
  title       String
  date        String ///*I have to get the date time attached in formal dates
  over        Boolean @default(false)
  duration    String
  time        String ///*Then this field should not be there
  description String
  course      Course  @relation(fields: [course_id], references: [id])
  course_id   Int
  fee         String?
}

model Vid_Classes {
  id        Int    @id @default(autoincrement())
  name      String
  course    Course @relation(fields: [course_id], references: [id])
  course_id Int
}

//A user will only be part of participant when paid is successfully verified.
model Participants {
  id              Int       @id @default(autoincrement())
  course          Course    @relation(fields: [course_id], references: [id])
  course_id       Int
  participant     Users     @relation(fields: [participant_id], references: [id])
  participant_id  Int
  suggested_parti Suggest[]
  gifted_parti    Gift[]
}

model Gift {
  id           Int          @id @default(autoincrement())
  gifted_by    Int
  gifted       Users        @relation(fields: [email_id], references: [email])
  email_id     String
  course       Course       @relation(fields: [course_id], references: [id])
  course_id    Int
  paticipant_d Participants @relation(fields: [id], references: [id])
}

model Suggest {
  id             Int          @id @default(autoincrement())
  suggested_by   Int
  suggested      Users        @relation(fields: [email_id], references: [email])
  email_id       String
  course         Course       @relation(fields: [course_id], references: [id])
  course_id      Int
  approved_parti Participants @relation(fields: [id], references: [id])
}

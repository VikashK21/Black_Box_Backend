// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               Int                @id @default(autoincrement())
  provider         String             @default("email/phone")
  img_thumbnail    String?
  first_name       String
  last_name        String
  email            String             @unique
  phone_num        String?
  password         String
  about            String?
  otp              Int                @default(0)
  verified         Boolean            @default(false)
  admin            Boolean            @default(false)
  created_at       DateTime           @default(now())
  Course           Course[]
  Participants     Participants[]
  Gift             Gift[]
  Suggest          Suggest[]
  Reactions        Reactions[]
  Classroom        Classroom?         @relation(fields: [classroom_id], references: [id])
  classroom_id     Int?
  updated_at       DateTime           @default(now())
  Classroom_Course Classroom_Course[]
}

model Classroom {
  id               Int                @id @default(autoincrement())
  logo             String?
  host             Int?
  title            String
  description      String?
  Classroom_Course Classroom_Course[]
  email_type       String             @unique
  Users            Users[]
  updated_at       DateTime           @default(now())
}

model Classroom_Course {
  id           Int           @id @default(autoincrement())
  completion   Boolean       @default(false)
  title        String
  description  String?
  host_details Classroom     @relation(fields: [host], references: [id])
  host         Int
  creator_d    Users?        @relation(fields: [creator], references: [id])
  creator      Int?
  images       String[]
  hosted       Boolean       @default(false)
  Classes      Classes[]
  link         String?
  dolphin      Json?
  // class_structure String? //
  // structure       Json?
  Vid_Classes  Vid_Classes[]
  // methodology     Json?
  // content         Json?
  requirements Json?
  // Participants    Participants[]
  // Gift            Gift[]
  // Suggest         Suggest[]
  Reactions    Reactions[]
}

model Course {
  id              Int            @id @default(autoincrement())
  completion      Boolean        @default(false)
  readmore        Boolean        @default(false)
  title           String
  price           String?
  description     String
  host_details    Users          @relation(fields: [host], references: [id])
  host            Int
  max_paticipants Int //
  images          String[]
  hosted          Boolean        @default(false)
  duration_type   String? //
  Classes         Classes[]
  link            String?
  dolphin         Json?
  class_structure String? //
  structure       Json?
  Vid_Classes     Vid_Classes[]
  methodology     Json?
  content         Json?
  requirements    Json?
  Participants    Participants[]
  Gift            Gift[]
  Suggest         Suggest[]
  Reactions       Reactions[]
}

model Classes {
  id                  Int               @id @default(autoincrement())
  title               String?
  date                String ///*I have to get the date time attached in formal dates
  over                Boolean           @default(false)
  duration            String
  time                String ///*Then this field should not be there
  description         String?
  course              Course?           @relation(fields: [course_id], references: [id])
  course_id           Int?
  fee                 String?
  Classroom_Course    Classroom_Course? @relation(fields: [classroom_course_id], references: [id])
  classroom_course_id Int?
}

model Vid_Classes {
  id                  Int               @id @default(autoincrement())
  name                String
  course              Course?           @relation(fields: [course_id], references: [id])
  course_id           Int?
  Classroom_Course    Classroom_Course? @relation(fields: [classroom_course_id], references: [id])
  classroom_course_id Int?
}

//A user will only be part of participant when paid is successfully verified.
model Participants {
  id              Int      @id @default(autoincrement())
  course          Course   @relation(fields: [course_id], references: [id])
  course_id       Int
  participant     Users    @relation(fields: [participant_id], references: [id])
  participant_id  Int
  suggested_parti Suggest?
  gifted_parti    Gift?
}

model Gift {
  id             Int          @id @default(autoincrement())
  gifted_by      Int
  gifted         Users        @relation(fields: [email_id], references: [email])
  email_id       String
  course         Course       @relation(fields: [course_id], references: [id])
  course_id      Int
  paticipant_d   Participants @relation(fields: [participant_id], references: [id])
  participant_id Int          @unique
}

model Suggest {
  id             Int           @id @default(autoincrement())
  suggested_by   Int
  suggested      Users         @relation(fields: [email_id], references: [email])
  email_id       String
  course         Course        @relation(fields: [course_id], references: [id])
  course_id      Int
  approved_parti Participants? @relation(fields: [participant_id], references: [id])
  participant_id Int?          @unique
}

model Reactions {
  id                  Int               @id @default(autoincrement())
  course_id           Int?
  courses             Course?           @relation(fields: [course_id], references: [id])
  reactor_id          Int
  reactor             Users             @relation(fields: [reactor_id], references: [id])
  heartful            Int               @default(1)
  Classroom_Course    Classroom_Course? @relation(fields: [classroom_course_id], references: [id])
  classroom_course_id Int?
}
